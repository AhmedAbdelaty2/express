#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs')
  , exec = require('child_process').exec;

/**
 * Framework version.
 */

var version = '2.3.2';

/**
 * Add session support.
 */

var sessions = false;

/**
 * Generate coffee script app.
 */

var coffeescript = false;

/**
 * CSS engine to utilize.
 */

var cssEngine;

/**
 * Template engine to utilize.
 */

var templateEngine = 'jade';

/**
 * Templates relative path
 */

var templatesRelativePath = "./../lib/gen/templates/";

/**
 * Usage documentation.
 */

var usage = ''
  + '\n'
  + '  Usage: express [options] [path]\n'
  + '\n'
  + '  Options:\n'
  + '    -s, --sessions           add session support\n'
  + '    -t, --template <engine>  add template <engine> support (jade|ejs). default=jade\n'
  + '    -c, --css <engine>       add stylesheet <engine> support (less|sass|stylus). default=plain css\n'
  + '    --coffeescript           coffee script template\n'
  + '    -v, --version            output framework version\n'
  + '    -h, --help               output help information\n'
  ;

// Parse arguments

var args = process.argv.slice(2)
  , path = '.';

while (args.length) {
  var arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
      abort(usage);
      break;
    case '-v':
    case '--version':
      abort(version);
      break;
    case '-s':
    case '--session':
    case '--sessions':
      sessions = true;
      break;
    case '-c':
    case '--css':
      args.length
        ? (cssEngine = args.shift())
        : abort('--css requires an argument');
      break;
    case '-t':
    case '--template':
      args.length
        ? (templateEngine = args.shift())
        : abort('--template requires an argument');
      break;
    case '--coffeescript':
      coffeescript = true;
      break;
    default:
        path = arg;
  }
}

// Generate application

(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty) {
      createApplicationAt(path);
    } else {
      confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
  var codeFileType = coffeescript ? "coffee" : "js";
  var app = fs.readFileSync(__dirname + "/" + templatesRelativePath + 'app.' + codeFileType, 'utf-8');
  var appTest = fs.readFileSync(__dirname + "/" + templatesRelativePath + 'app.test.' + codeFileType, 'utf-8');
	
  mkdir(path, function(){
    mkdir(path + '/pids');
    mkdir(path + '/logs');
    mkdir(path + '/public/javascripts');
    mkdir(path + '/public/images');
    mkdir(path + '/public/stylesheets', function(){
      switch (cssEngine) {
        case 'stylus':
   		  copy(__dirname + "/" + templatesRelativePath + 'stylesheets/style.styl', path + '/public/stylesheets/style.styl');
          break;
        case 'less':
          copy(__dirname + "/" + templatesRelativePath + 'stylesheets/style.less', path + '/public/stylesheets/style.less');
          break;
        case 'sass':
          copy(__dirname + "/" + templatesRelativePath + 'stylesheets/style.sass', path + '/public/stylesheets/style.sass');
          break;
        default:
          copy(__dirname + "/" + templatesRelativePath + 'stylesheets/style.css', path + '/public/stylesheets/style.css');
      }
    });
    mkdir(path + '/views', function(){
      switch (templateEngine) {
        case 'ejs':
          copy(__dirname + "/" + templatesRelativePath + 'view/layout.ejs', path + '/views/layout.ejs');
          copy(__dirname + "/" + templatesRelativePath + 'view/index.ejs', path + '/views/index.ejs');
          break;
        case 'jade':
          copy(__dirname + "/" + templatesRelativePath + 'view/layout.jade', path + '/views/layout.jade');
          copy(__dirname + "/" + templatesRelativePath + 'view/index.jade', path + '/views/index.jade');
          break;
      }
    });
    mkdir(path + '/test', function(){
      write(path + '/test/app.test.' + codeFileType, appTest);
    });

    // CSS Engine support
    switch (cssEngine) {
      case 'sass':
      case 'less':
        app = app.replace('{css}', coffeescript ? 
          '\n	app.use express.compiler { src: __dirname + \'/public\', enable: [\'' + cssEngine + '\'] }' : 
          '\n  app.use(express.compiler({ src: __dirname + \'/public\', enable: [\'' + cssEngine + '\'] }));');
        break;
      case 'stylus':
        app = app.replace('{css}', coffeescript ? 
          '\n	app.use require \'stylus\').middleware({ src: __dirname + \'/public\' })' : 
          '\n  app.use(require(\'stylus\').middleware({ src: __dirname + \'/public\' }));');
        break;
      default:
        app = app.replace('{css}', '');
    }

    // Session support
    app = app.replace('{sess}', sessions
      ? (coffeescript ? 
        '\n	app.use express.cookieParser()\n	app.use express.session { secret: \'your secret here\' }' :
        '\n  app.use(express.cookieParser());\n  app.use(express.session({ secret: \'your secret here\' }));')
      : '');

    // Template support
    app = app.replace(':TEMPLATE', templateEngine);

    write(path + '/app.' + codeFileType, app);

    // Suggestions
    process.on('exit', function(){
      if (cssEngine) {
        console.log('   - make sure you have installed %s: \x1b[33m$ npm install %s\x1b[0m'
          , cssEngine
          , cssEngine);
      }
      if (coffeescript) {
        console.log('   - make sure you have installed coffeescript: \x1b[33m$ npm install coffeescript\x1b[0m');
      }
      console.log('   - make sure you have installed %s: \x1b[33m$ npm install %s\x1b[0m'
        , templateEngine
        , templateEngine);
    });
  });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Copy the file.
 *
 * @param {String} from
 * @param {String} to
 */

function copy(from, to) {
	write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function confirm(msg, fn) {
  prompt(msg, function(val){
    fn(/^ *y(es)?/i.test(val));
  });
}

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function prompt(msg, fn) {
  // prompt
  if (' ' == msg[msg.length - 1]) {
    process.stdout.write(msg);
  } else {
    console.log(msg);
  }

  // stdin
  process.stdin.setEncoding('ascii');
  process.stdin.once('data', function(data){
    fn(data);
  }).resume();
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  exec('mkdir -p ' + path, function(err){
    if (err) throw err;
    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}
