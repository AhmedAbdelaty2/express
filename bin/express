#!/usr/bin/env node

/**
 * Module dependencies.
 */

var exec = require('child_process').exec
  , program = require('commander')
  , mkdirp = require('mkdirp')
  , pkg = require('../package.json')
  , version = pkg.version
  , os = require('os')
  , fs = require('fs')
  , Future = null
  , Fiber = null
  , haveFuture = false
  , getRemote = function() {}
  , adjustVer = function() {}
  , sleep = function() {};

try {
  // Replace the no-op functions with working versions before cotinuing
  Future = require('fibers/future');
  Fiber = require('fibers');
  haveFuture = true;

  var exec = require('child_process').exec
    , checkCurl = new Future;

  // Checks to see if curl exists in the path. If not, set haveFuture to
  // false and move on.
  exec('which curl', checkCurl.resolver());
  if (checkCurl.error) {
    haveFuture = false;
    console.warn('Curl unavailable. We cannot offer client side jQuery');
    throw "missing curl";
  }

  /**
   * Invokes curl to retrieve the latest versions of jQuery from
   * remote servers. It uses fibers to wait until the process is
   * finished before continuing. 
   *
   * @param url the remote url to download
   * @param cdTo the path to change directory to before downloading
   */ 
  getRemote = function(url, cdTo) {
    var exec = require('child_process').exec,
        result = new Future();
    cdTo = cdTo || 'public/js';
    exec('curl -O ' + url, { cwd: cdTo }, result.resolver());
    result.wait();
    return !!!result.error;
  };
 
  /**
   * This method reads in the supplied file and searches for a version
   * string that consists of the letter 'v' followed immediately by up
   * to 3 numbers separated by a period. If there is a match, the name
   * of the file is altered replacing the part supplied as the second
   * parameter with the version number (sans the letter v).
   *
   * @param ofFile path to file relative to the current directory
   * @replaceWhat if the file name is jquery-latest.js and then supplying
   *     the word 'latest' would replace that value with any version 
   *     number found within. 
   */  
  adjustVer = function(ofFile, replaceWhat) {
    var fs = require('fs'),
        path = require('path'),
        ver, res;

    replaceWhat = replaceWhat || 'latest';
    ofFile = path.resolve(path.join(process.cwd(), ofFile || ''));

    if (fs.existsSync(ofFile)) {
      res = fs.readFileSync(ofFile).toString();
    }
    else {
      return false;
    }

    if (res) {
      ver = /v@?(\d+\.?\d*\.?\d*)/i.exec(res);
      ver = ver ? ver[1] : replaceWhat;
      res = new Future();
      fs.rename(ofFile, ofFile.replace(replaceWhat, ver), res.resolver());
      res.wait();
      if (!res.error) 
        return true;
    }
    return false;
  };
}
catch (e) { 
  /* Cannot offer client side jquery download without a future */
}

// CLI

program
  .version(version)
  .option('-s, --sessions', 'add session support')
  .option('-e, --ejs', 'add ejs engine support (defaults to jade)')
  .option('-J, --jshtml', 'add jshtml engine support (defaults to jade)')
  .option('-H, --hogan', 'add hogan.js engine support')
  .option('-b, --handlebars', 'add handlebars.js engine support')
  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus) (defaults to plain css)')
  .option('-F, --forever', 'add forever support for redundant production')
  .option('-q, --sjquery', 'add server side jquery support')

if (haveFuture) {
  program.option('-Q, --cjquery', 'add client side jquery support')
}

program
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

// Path

var path = program.args.shift() || '.';

// end-of-line code

var eol = 'win32' == os.platform() ? '\r\n' : '\n'

// Template engine

program.template = 'jade';
if (program.ejs) program.template = 'ejs';
if (program.jshtml) program.template = 'jshtml';
if (program.hogan) program.template = 'hjs';
if (program.handlebars) program.template = 'hbs';

/**
 * Routes index template.
 */

var index = [
    '/**'
  , ' * GET home page.'
  , ' */'
  , ''
  , 'exports.index = function(req, res){'
  , '  res.render(\'index\', { title: \'Express\' });'
  , '};'
].join(eol);

/**
 * Routes users template.
 */

var users = [
    '/**'
  , ' * GET users listing.'
  , ' */'
  , ''
  , 'exports.list = function(req, res){'
  , '  res.send("respond with a resource");'
  , '};'
].join(eol);

/**
 * Jade layout template.
 */

var jadeLayout = [
    'doctype 5'
  , 'html'
  , '  head'
  , '    title= title'
  , '    link(rel=\'stylesheet\', href=\'/css/style.css\')'
  , '  body'
  , '    block content'
].join(eol);

/**
 * Jade index template.
 */

var jadeIndex = [
    'extends layout'
  , ''
  , 'block content'
  , '  h1= title'
  , '  p Welcome to '
  , '    span.title #{title}'
].join(eol);

/**
 * EJS index template.
 */

var ejsIndex = [
    '<!DOCTYPE html>'
  , '<html>'
  , '  <head>'
  , '    <title><%= title %></title>'
  , '    <link rel=\'stylesheet\' href=\'/css/style.css\' />'
  , '  </head>'
  , '  <body>'
  , '    <h1><%= title %></h1>'
  , '    <p>Welcome to <span class="title"><%= title %></span></p>'
  , '  </body>'
  , '</html>'
].join(eol);

/**
 * JSHTML layout template.
 */

var jshtmlLayout = [
    '<!DOCTYPE html>'
  , '<html>'
  , '  <head>'
  , '    <title> @write(title) </title>'
  , '    <link rel=\'stylesheet\' href=\'/css/style.css\' />'
  , '  </head>'
  , '  <body>'
  , '    @write(body)'
  , '  </body>'
  , '</html>'
].join(eol);

/**
 * JSHTML index template.
 */

var jshtmlIndex = [
    '<h1>@write(title)</h1>'
  , '<p>Welcome to <span class="title">@write(title)</span></p>'
].join(eol);

/**
 * Hogan.js index template.
 */
var hoganIndex = [
    '<!DOCTYPE html>'
  , '<html>'
  , '  <head>'
  , '    <title>{{ title }}</title>'
  , '    <link rel=\'stylesheet\' href=\'/css/style.css\' />'
  , '  </head>'
  , '  <body>'
  , '    <h1>{{ title }}</h1>'
  , '    <p>Welcome to <span class="title">{{ title }}</span></p>'
  , '  </body>'
  , '</html>'
].join(eol);

/**
 * Handlebars layout template
 */
 
var hbsLayout = [
    '<!DOCTYPE html>'
  , ''
  , '<html>'
  , '  <head>'
  , '    <title>{{^title}}No title{{/title}}{{{title}}}</title>'
  , '    <link rel="stylesheet" href="/css/style.css" type="text/css" media="screen" title="no title" charset="utf-8">'
  , '    {{{xtraStylesheets}}}'
  , '  </head>'
  , ''
  , '  <body>'
  , '    {{{body}}}'
  , '    {{{xtraScripts}}}'
  , '  </body>'
  , '</html>'
].join(eol);

/**
 * Handlebars index template
 */

var hbsIndex = [
    '<h1>{{title}}</h1>'
  , '<p>Welcome to <span class="title">{{title}}</span>!</p>'
].join(eol);

/**
 * Default css template.
 */

var css = [
    'body {'
  , '  padding: 50px;'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;'
  , '}'
  , ''
  , 'body span.title {'
  , '  color: #00B7FF;'
  , '}'
].join(eol);

/**
 * Default less template.
 */

var less = [
    'body {'
  , '  padding: 50px;'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;'
  , ''
  , '  span.title {'
  , '    color: #00B7FF;'
  , '  }'
  , '}'
].join(eol);

/**
 * Default stylus template.
 */

var stylus = [
    'body'
  , '  padding: 50px'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif'
  , 'span.title'
  , '  color: #00B7FF'
].join(eol);

/**
 * App template.
 */

var app = [
    ''
  , '/**'
  , ' * Module dependencies.'
  , ' */'
  , ''
  , 'var express = require(\'express\')'
  , '  , routes = require(\'./routes\')'
  , '  , user = require(\'./routes/user\')'
  , '  , http = require(\'http\')'
  , '  , path = require(\'path\');'
  , ''
  , 'var app = express();'
  , ''
  , 'app.configure(function(){'
  , '  app.set(\'port\', process.env.PORT || 3000);'
  , '  app.set(\'views\', __dirname + \'/views\');'
  , program.template == 'jshtml'
    ? '  app.set(\'view engine\', \'jshtml\');'
    : '  app.set(\'view engine\', \'html\');' + eol
    + '  app.engine(\'html\', :ENGINE);'
  , '  app.use(express.favicon());'
  , '  app.use(express.logger(\'dev\'));'
  , '  app.use(express.bodyParser());'
  , '  app.use(express.methodOverride());{sess}'
  , '  app.use(app.router);{css}'
  , '  app.use(express.static(path.join(__dirname, \'public\')));'
  , '});'
  , ''
  , 'app.configure(\'development\', function(){'
  , '  app.use(express.errorHandler());'
  , '});'
  , ''
  , 'app.get(\'/\', routes.index);'
  , 'app.get(\'/users\', user.list);'
  , ''
  , 'http.createServer(app).listen(app.get(\'port\'), function(){'
  , '  console.log("Express server listening on port " + app.get(\'port\'));'
  , '});'
  , ''
].join(eol);

// Generate application

(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createApplicationAt(path);
    } else {
      program.confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
  console.log();
  process.on('exit', function(){
    console.log();
    console.log('   install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ node app');
    console.log();
  });

  mkdir(path, function(){
    mkdir(path + '/public');
    mkdir(path + '/public/js');
    mkdir(path + '/public/imgs');
    mkdir(path + '/public/css', function(){
      switch (program.css) {
        case 'less':
          write(path + '/public/css/style.less', less);
          break;
        case 'stylus':
          write(path + '/public/css/style.styl', stylus);
          break;
        default:
          write(path + '/public/css/style.css', css);
      }
    });

    mkdir(path + '/routes', function(){
      write(path + '/routes/index.js', index);
      write(path + '/routes/user.js', users);
    });

    mkdir(path + '/views', function(){
      switch (program.template) {
        case 'ejs':
          write(path + '/views/index.html', ejsIndex);
          break;
        case 'jade':
          write(path + '/views/layout.jade', jadeLayout);
          write(path + '/views/index.html', jadeIndex);
          break;
        case 'jshtml':
          write(path + '/views/layout.jshtml', jshtmlLayout);
          write(path + '/views/index.jshtml', jshtmlIndex);
          break;
        case 'hjs':
          write(path + '/views/index.html', hoganIndex);
          break;
        case 'hbs':
          write(path + '/views/index.html', hbsIndex);
          write(path + '/views/layout.html', hbsLayout);
          break;
      }
    });

    // CSS Engine support
    switch (program.css) {
      case 'less':
        app = app.replace('{css}', eol + '  app.use(require(\'less-middleware\')({ src: __dirname + \'/public\' }));');
        break;
      case 'stylus':
        app = app.replace('{css}', eol + '  app.use(require(\'stylus\').middleware(__dirname + \'/public\'));');
        break;
      default:
        app = app.replace('{css}', '');
    }

    // Session support
    app = app.replace('{sess}', program.sessions
      ? eol + '  app.use(express.cookieParser(\'your secret here\'));' + eol + '  app.use(express.session());'
      : '');

    // Template support
    switch (program.template) {
      case 'ejs':
        app = app.replace(':ENGINE', 'require(\'ejs\').renderFile');
        break;
      case 'jade':
        app = app.replace(':ENGINE', 'require(\'jade\').__express');
        break;
      case 'jshtml':
        break;
      case 'hjs':
        app = app.replace(':ENGINE', 'require(\'hjs\').__express');
        break;
      case 'hbs':
        app = app.replace(':ENGINE', 'require(\'hbs\').__express');
        break;
    }

    // package.json
    var pkg = {
        name: 'application-name'
      , version: '0.0.1'
      , private: true
      , scripts: { start: 'node app' }
      , dependencies: {
        express: version
      }
    }

    if (program.template) pkg.dependencies[program.template] = '*';
    if (program.sjquery) pkg.dependencies['jquery'] = '*';
    if (program.forever) pkg.dependencies['forever'] = '*';
    if (program.cjquery) {
      if (haveFuture) {
        new Fiber(function() {
        getRemote('http://code.jquery.com/jquery-latest.js', 'public/js');
        getRemote('http://code.jquery.com/jquery-latest.min.js', 'public/js');
        adjustVer('public/js/jquery-latest.js');
        adjustVer('public/js/jquery-latest.min.js');
      }).run();
      }
    }

    // CSS Engine support
    switch (program.css) {
      case 'less':
        pkg.dependencies['less-middleware'] = '*';
        break;
      default:
        if (program.css) {
          pkg.dependencies[program.css] = '*';
        }
    }

    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    write(path + '/app.js', app);
  });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}
